---
##########################
## ssh role variables
##########################
sshd_config:
  ListenAddress:
    - 10.20.0.1
    - 10.30.0.1
  Port: 24
  UseDNS: false
  PasswordAuthentication: false
  PermitRootLogin: false
  PermitEmptyPasswords: false
  ChallengeResponseAuthentication: false
  GSSAPIAuthentication: false
  KerberosAuthentication: false
  X11Forwarding: false
  Protocol: 2
  DebianBanner: false

##########################
## systemd-networkd.links role variables
##########################
links:
  - name: wlExternal
    match:
      device:
        mac_address: b8:08:cf:cd:9b:00 # Changeme!

##########################
## netplan role variables
##########################
netplan_config_file: /etc/netplan/ansible-config.yaml
netplan_config_file_mode: "0600"
netplan_enabled: true # If false, no netplan configuration will be written
netplan_remove_existing: true
netplan_backup_existing: true
netplan_check_install: true
netplan_apply: true

netplan_configuration:
  network:
    version: 2
    ethernets:
      internal-lan:
        match:
          macaddress: 94:c6:91:1a:65:e8 # Changeme!
        set-name: enoInternal
        addresses:
          - "10.20.0.1/24"
          - "10.0.0.1/24"
        nameservers:
          search:
            - "maas.{{ vault.general.domains.dns }}"
          addresses:
            - 10.20.0.1
    wifis:
      wlExternal:
        access-points:
          ChangemeSSID: # Change this to your SSID!
            auth:
              key-management: sae # Use WPA3
              password: "{{ vault.wifi.auth.psk }}"
        # match:
        # macaddress: ae:fd:ce:27:21:90
        # set-name: wlExternal
        # The above does not work, with netplan:
        # "networkd backend does not support wifi with match:, only by interface name"
        # Therefore, we use the systemd-networkd roles to rename the interface
        # See above for
        dhcp4: true
        dhcp4-overrides:
          use-dns: false
          use-ntp: false
          use-hostname: false
          use-routes: false
          use-domains: false
        regulatory-domain: PL
        routes:
          - to: default
            via: 192.168.10.1
            on-link: true
        nameservers:
          addresses:
            - 10.20.0.1
    tunnels:
      wg0:
        mode: wireguard
        port: 51820
        key: "{{ vault.wireguard.auth.private_key }}"
        addresses:
          - "10.30.0.1/16"
        peers:
          - keys:
              public: "GZ/vB0iBjq5MgYadSYeU+pBw14p4iTOqMlPyZqTVhy8="
            allowed-ips:
              - "10.30.10.2/32" # GW 1
            keepalive: 120
          - keys:
              public: "JoM3rQKTHinMrcblya4v0EQT09FODzb16adECPuOXhU="
            allowed-ips:
              - "10.30.0.20/32" # AD 0
            keepalive: 120
          - keys:
              public: "Y2nQoPbNi8mASF1wexXXieHdRHtZ0BFlB3ayFwv6Qkk="
            allowed-ips:
              - "10.30.1.10/32" # IP 0
            keepalive: 120
          - keys:
              public: "nXR7lljBK3WvguZdbhW/ENIZxJNlLPHo3yaOcSUH7y4="
            allowed-ips:
              - "10.30.1.11/32" # EL 0
            keepalive: 120
          - keys:
              public: "egP60UJhTdUy3HUsIzOZ7mW3N3Y7UVO3+5UuSIYocT4="
            allowed-ips:
              - "10.30.1.12/32" # MM 0
            keepalive: 120
          - keys:
              public: "kmsZCBqLS3ONX3IuF9w/tIcoVh17/1Me3rzumvy4oVs="
            allowed-ips:
              - "10.30.2.11/32" # DD 0
            keepalive: 120
        nameservers:
          addresses:
            - 10.30.0.1
        routes:
          - to: default
            via: 10.30.10.2 # GW 1
            on-link: true
            table: 201
          - to: 10.0.0.0/8 # BH rule
            type: blackhole
            table: 200
        routing-policy:
          - from: 10.30.2.0/24 # NSC Network BH
            to: 0.0.0.0/0
            table: 200
            priority: 0
          - from: 10.30.2.0/24 # NSC Network GW
            to: 0.0.0.0/0
            table: 201
            priority: 1

#########################
# firewall role variables
#########################
# Clear defaults
nft_input_default_rules: {}
nft_forward_default_rules: {}
nft_output_default_rules: {}
# TCP 9100 Prometheus (fluent-bit)
# TCP 24 SSH (re-routed for GitLab)
# TCP/UDP 53 DNS
# UDP 123 NTP
# UDP 51820 wireguard
in_tcp_port: "{ 24, 53, 9100 }"
in_udp_port: "{ 161, 53, 123, 51820 }"
# TCP 9091 minio server
# TCP/UDP 3478, 5349 coturn
# TCP 25/465 SMTP/S
# TCP 143/993 IMAP/S
# TCP 1883/8883 MQTT/S
forward_tcp_port: "{ 25, 465, 143, 993, 80, 443, 22, 3478, 5349, 1883, 8883, 9091 }"
forward_udp_port: "{ 123, 3478, 5349 }"
# Enabling forwarding and NAT
firewall_forward_enabled: true
firewall_nat_enabled: true

# Definitions
nft_define_host:
  lan_interface:
    name: lan_interface
    value: "enoInternal"
  wg_interface:
    name: wg_interface
    value: "wg0"
  wan_interface:
    name: wan_interface
    value: "wlExternal"
  lan_network:
    name: lan_network
    value: "10.0.0.0/8"
  forward_tcp_accepted:
    name: forward_tcp_accept
    value: "{{ forward_tcp_port }}"
  forward_udp_accepted:
    name: forward_udp_accept
    value: "{{ forward_udp_port }}"

# Forward definitions
nft_set_host:
  forward_tcp_accept:
    - type inet_service; flags interval;
    - elements = $forward_tcp_accept
  forward_udp_accept:
    - type inet_service; flags interval;
    - elements = $forward_udp_accept

# Input rules
nft_input_host_rules:
  000_policy:
    - type filter hook input priority 0; policy drop;
  005_global:
    - jump global
  010_drop_unwanted:
    - ip daddr @blackhole counter drop
  011_drop_unwanted_ipv6:
    - ip6 daddr @ip6blackhole counter drop
  015_localhost:
    - iif lo accept
  050_icmp:
    - meta l4proto {icmp,icmpv6} accept
  200_input_udp_accepted:
    - udp dport @in_udp_accept ct state new accept
  210_input_tcp_accepted:
    - tcp dport @in_tcp_accept ct state new accept

# Output rules
# Accept all
nft_output_host_rules:
  000_policy:
    - type filter hook output priority 0; policy accept;

# Forwarding rules
nft_forward_host_rules:
  000_policy:
    - type filter hook forward priority 0; policy drop;
  005_global:
    - jump global
  200_lan_to_lan:
    - iifname { $lan_interface, $wg_interface } ip saddr $lan_network oifname {$lan_interface, $wg_interface} ct state new accept
  300_lan_to_wan:
    - iifname { $lan_interface, $wg_interface } ip saddr $lan_network oifname $wan_interface ct state new accept
  400_wan_to_lan_tcp:
    - iifname $wan_interface ip daddr $lan_network oifname {$lan_interface, $wg_interface} tcp dport @forward_tcp_accept ct state new accept
  410_wan_to_lan_udp:
    - iifname $wan_interface ip daddr $lan_network oifname {$lan_interface, $wg_interface} udp dport @forward_udp_accept ct state new accept

# NAT pre-routing, including DNAT
nft_nat_host_prerouting_rules:
  005_dnat_http:
    - iifname $wan_interface tcp dport { 80, 443 } dnat "{{ hostvars[groups['haproxy'][0]].ansible_host }}"
  010_dnat_ssh:
    - iifname $wan_interface tcp dport 22 dnat "{{ hostvars[groups['haproxy'][0]].ansible_host }}"
  015_dnat_email:
    - iifname $wan_interface tcp dport { 143, 993, 25, 465 } dnat "{{ hostvars[groups['haproxy'][0]].ansible_host }}"
  025_dnat_coturn:
    - iifname $wan_interface tcp dport { 3478, 5349 } dnat "{{ hostvars[groups['haproxy'][0]].ansible_host }}"
  030_dnat_mqtt:
    - iifname $wan_interface tcp dport { 1883, 8883 } dnat "{{ hostvars[groups['haproxy'][0]].ansible_host }}"
  500_dnat_minio:
    - iifname $wan_interface tcp dport 9091 dnat "{{ hostvars[groups['s3'][0]].ansible_host }}"

# NAT post-routing
nft_nat_host_postrouting_rules:
  005_masquerade_lan_to_wan:
    - ip saddr $lan_network oifname $wan_interface masquerade random,persistent

########################
# Bind9 role variables
########################
bind9_authoritative: true
bind9_forward: true
bind9_recursor: true
bind9_listen_on:
  - 10.20.0.1
  - 10.30.0.1
bind9_acl_networks:
  - 10.0.0.0/8
bind9_forward_servers:
  - 9.9.9.11
  - 149.112.112.11
bind9_generate_ddns_key: true
bind9_zones:
  - name: "{{ dns_domain }}"
    type: primary
    ddns_update_key: ddnskey
    ddns_update_policy_grant: "zonesub any"
    secondary_servers:
      - 'key "ddnskey"'
    default_ttl: 600
    serial: 2025061400
    refresh: 1D
    retry: 2H
    expire: 1000H
    null_forwarders: true
    primary: "ns.{{ dns_domain }}"
    admin: "admin.{{ dns_domain }}"
    ns_records:
      - "ns.{{ dns_domain }}"
    # RR values are either relative to the zone, either with a final dot when outside.
    rrs:
      - label: gateway
        type: A
        rdata: 10.20.0.1
      - label: ns
        type: A
        rdata: 10.20.0.1
      - label: vault
        type: A
        rdata: 10.20.0.8
      - label: service0
        type: A
        rdata: 10.20.0.8
      - label: s3
        type: A
        rdata: 10.20.0.8
      - label: ns.maas
        type: A
        rdata: 10.20.0.8
      - label: maas
        type: NS
        rdata: ns.maas
  - name: 10.in-addr.arpa
    type: primary
    default_ttl: 600
    serial: 2025061400
    refresh: 1D
    retry: 2H
    expire: 1000H
    primary: "ns.{{ dns_domain }}"
    admin: "admin.{{ dns_domain }}"
    ns_records:
      - "ns.{{ dns_domain }}."
    rrs:
      - label: 1.0.20
        type: PTR
        rdata: "gateway.{{ dns_domain }}."
      - label: 20
        type: NS
        rdata: "prime.{{ dns_domain }}."

############################
# NTP role variables
############################
# Setup the NTP server on the gateway
ntp_timezone: Europe/Warsaw
ntp_servers:
  - server: 1.ntp.ubuntu.com
    type: pool
    options:
      - option: iburst
      - option: nts # Use secure time
  - server: 2.ntp.ubuntu.com
    type: pool
    options:
      - option: iburst
      - option: nts
  - server: 3.ntp.ubuntu.com
    type: pool
    options:
      - option: iburst
      - option: nts
  - server: 4.ntp.ubuntu.com
    type: pool
    options:
      - option: iburst
      - option: nts

ntp_allow_hosts:
  - 10.0.0.0/8
